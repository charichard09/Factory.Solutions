Dr. Sillystringz's Factory:
build a web application to manage engineers and the machines they are licensed to fix
add a list of engineers, list of machines, and specify which engineers are licensed to repair which machines
An engineer can be licensed to repair many machines, a machine can have many engineers licensed to repair it

User Stories
// Index showing all Engineers and Index showing all Machines
As the factory manager, I need to be able to see a list of all engineers, and I need to be able to see a list of all machines.

// Details page for each Engineer object and Details page for each Machines object
As the factory manager, I need to be able to select an engineer and see their details, I also need to be able to select a machine, see its details

// AddEngineer and AddMachine GET and POST Actions
// display machines attached to an individual engineer's details page, display engineers attached to an individual machine's details page
see a list of all machines that engineer is licensed to repair, and see a list of all engineers licensed to repair it.

// Create page for Engineers and Machines
As the factory manager, I need to add new engineers to our system when they are hired. I also need to add new machines to our system when they are installed.

// Add model validation with data annotation [Required(ErrorMessage = "string")] to Engineer.cs and Machine.cs entity properties
// update database 
I should not be able to create an engineer or a machine if the form's fields are empty or contain invalid values.

// [HttpPost] DeleteJoin() actions for EngineersContoller and MachinesController to remove JoinEntity many-to-many relationship
remove machines that a specific engineer is licensed to repair or remove engineers from a specific machine.

// Add conditional to Details.cshtml for Engineer Views checking IF @Model.JoinEntities.Machines == 0, display disabled button "No machines to assign", ELSE display active button "assign machine"  
// for Machine Views IF @Model.JoinEntities.Engineers == 0, display disabled button "No engineers to assign", ELSE display active button "assign machine"  
I should not be able to add a machine to an engineer if there are no machines. Likewise I should not be able to add an engineer to a machine if there are no engineers.

// display all Engineers and all Machines on Homepage
When I access the application, I should see a splash page that lists all engineers and machines.





> update appsettings.json with db name

// in Program.cs, update builder.Services.AddDbContext<T>... where T is FactoryContext

// database context
> create FactoryContext.cs /w DbSet<Engineer> Engineers, DbSet<Machine> Machines, DbSet<EngineerMachine> JoinEntities

// create entities
> create Engineer.cs entity /w properties EngineerId, Name, List<EngineerMachine> JoinEntities  
	
> create Machine.cs entity /w properties MachineId, Name, List<EngineerMachine> JoinEntities  

> create EngineerMachine.cs join entity /w EngineerMachineId, EngineerId, Engineer, MachineId, Machine

// run dotnet ef migrations add Initial, database update, confirm table is created
	
// create controller and corresponding views
> create HomeController and Views:
	create Index() action
		create Index.cshtml /w "Welcome to Dr. Sillystringz's Facotry 
			<h4>Engineers</h4> <h4>Machines</4> place holders
				confirm view

> create EngineersController.cs and Views:
	create Index() action
		create Index.cshtml 
		
	confirm view

	create Create() action
		create Create.cshtml /w form

	create [HttpPost] Create() action
	
	confirm index view shows created object

	create Details() action
		create Details.cshtml 
	
	confirm index shows object details

> create MachinesController.cs and Views
	create Index() action
		create Index.cshtml 
		
	confirm view

	create Create() action
		create Create.cshtml /w form

	create [HttpPost] Create() action
	
	confirm index view shows created object

	create Details() action
		create Details.cshtml 
	
	confirm index shows object details
	
> add to EngineersController.cs and Views:
	create AddMachine() action
		create AddMachine.cshtml form
		
	create [HttpPost] AddMachine() action
	
	confirm adding machine to engineer and seeing on engineers details page
	
> add conditional to Details.cshtml for Engineer Views checking IF @Model.JoinEntities.Machines == 0, display disabled button "No machines to assign", ELSE display active button "assign machine"  
	
> add to MachinesController.cs and Views:
	create AddEngineer() action
		create AddEngineer.cshtml form
		
	create [HttpPost] AddEngineer() action
	
	confirm adding engineer to machine and seeing on a machines details page
	
> add conditional to Details.cshtml for Machines Views checking IF @Model.JoinEntities.Engineers == 0, display disabled button "No engineers to assign", ELSE display active button "assign engineer" 
	
> add model validation with data annotation [Required(ErrorMessage = "string")] for Name entity property in Engineer.cs
	add HtmlHelper method ValidationMessageFor to Engineers/Create
		add model validation with data annotation [Required(ErrorMessage = "string")] for Name entity property in Machine.cs
			add HtmlHelper method ValidationMessageFor to Machines/Create
				confirm working by entering blank name for both
		
> add to EngineersController
	
	create Edit() action
		create Edit.cshtml form
			confirm form view is working

	create [HttpPost] Edit() action
		confirm form succesfully updates

	create Delete() action
		create Delete.cshtml confirmation page
			confirm confirmation page view works
		
	create [HttpPost, ActioName("Delete")] Delete() action
		confirm deletion of an Engineer
	
	create [HttpPost] DeleteJoin() action
		add delete button for every Machine on an individual Engineer's Details page
			confirm deletion of a machine attached to an engineer
	
> add to MachinesController
	
	create Edit() action
		create Edit.cshtml form
			confirm form view is working

	create [HttpPost] Edit() action
		confirm form succesfully updates

	create Delete() action
		create Delete.cshtml confirmation page
			confirm confirmation page view works
		
	create [HttpPost, ActioName("Delete")] Delete() action
		confirm deletion of a Machine
	
	create [HttpPost] DeleteJoin() action
		add delete button for every Engineer on an individual Machine's Details page
			confirm deletion of an engineer attached to a machine
			
add to HomeController.cs Index() controller DbSet Machines and Engineers in a Dictionary into View
		finish adding to Machines and Engineers tags to display all Machines and Engineers as ActionLinks
	
	
	
	
	
	


