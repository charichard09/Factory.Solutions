Dr. Sillystringz's Factory:
build a web application to manage engineers and the machines they are licensed to fix
add a list of engineers, list of machines, and specify which engineers are licensed to repair which machines
An engineer can be licensed to repair many machines, a machine can have many engineers licensed to repair it

User Stories
As the factory manager, I need to be able to see a list of all engineers, and I need to be able to see a list of all machines.
As the factory manager, I need to be able to select a engineer, see their details, and see a list of all machines that engineer is licensed to repair. I also need to be able to select a machine, see its details, and see a list of all engineers licensed to repair it.
As the factory manager, I need to add new engineers to our system when they are hired. I also need to add new machines to our system when they are installed.
I should not be able to create an engineer or a machine if the form's fields are empty or contain invalid values.
As the factory manager, I should be able to add new machines even if no engineers are employed. I should also be able to add new engineers even if no machines are installed.
As the factory manager, I need to be able to add or remove machines that a specific engineer is licensed to repair. I also need to be able to modify this relationship from the other side, and add or remove engineers from a specific machine.
I should not be able to add a machine to an engineer if there are no machines. Likewise I should not be able to add an engineer to a machine if there are no engineers.
When I access the application, I should see a splash page that lists all engineers and machines.



> update appsettings.json with db name

// in Program.cs, update builder.Services.AddDbContext<T>... where T is FactoryContext

// database context
> create FactoryContext.cs /w DbSet<Engineer> Engineers, DbSet<Machine> Machines, DbSet<EngineerMachine> JoinEntities

// create entities
> create Engineer.cs entity /w properties MachineId, Name, List<EngineerMachine> JoinEntities  
	
> create Machine.cs entity /w properties MachineId, Name, List<EngineerMachine> JoinEntities  

> create EngineerMachine.cs join entity /w EngineerMachineId, EngineerId, Engineer, MachineId, Machine

// run dotnet ef migrations add Initial, database update, confirm table is created
	
// create controller and corresponding views
> create HomeController and Views:
	create Index() action
		create Index.cshtml /w link to "view all cuisines"

> create StylistsController and Views:
	create Index() action
		create Index.cshtml /w link "Add new stylist"


	create Create() action
		create Create.cshtml /w form

	create [HttpPost] Create() action

	create Details() action
		create Details.cshtml 

NON-MVP:
	create Delete() action
		create Delete.cshtml

	create Edit() action
		create Edit.cshtml

	create [HttpPost] Edit() action



> create ClientsController and Views

	create Create() action
		create Create.cshtml /w form

	create [HttpPost] Create() action

NON-MVP:
	create Index() action
		create Index.cshtml

	create Details() action
		create Details.cshtml /w ?

	create Delete() action

	create Edit() action
		create Edit.cshtml

	create [HttpPost] Edit() action
